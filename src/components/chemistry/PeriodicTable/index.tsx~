import type {FC} from "react";
import {type ChangeEvent, type ReactElement, useState} from "react";
import elements from "@components/chemistry/PeriodicTable/elements.json";
import type {CategoryState, CellProps, ElementJson} from "@components/chemistry/PeriodicTable/types.ts";
import "./style.css";

export const Cell: FC<CellProps> = ({
    number,
    name,
    symbol,
    category,
    xpos,
    ypos,
    atomic_mass,
    visible,
}) => (
    <div
        key={number}
        // number === 0 if line need to be empty
        className={`${number !== 0 ? "cell" : "empty-cell"}`}
        data-category={category}
        style={{
            gridRowStart: ypos,
            gridColumnStart: xpos,
            backgroundColor: !visible ? "transparent" : "",
            transition: "background-color 0.2s ease-in-out",
            cursor: visible ? "pointer" : "auto",
        }}
        onClick={visible ? () => console.log(`${symbol} ${name} clicked`) : undefined}
    >
        {/* number === 0 if line need to be empty */}
        <span className="number">{number !== 0 && number}</span>
        <span className="symbol">{symbol}</span>
        <span className="name">{name}</span>
        <span className="atomic-mass">{atomic_mass}</span>
    </div>
);

const makeInitialCategories = (): CategoryState =>
    elements.reduce<CategoryState>(
        (acc: CategoryState, {category}) => {
            acc[category as keyof CategoryState] = true;
            return acc;
        },
        {} as CategoryState,
    );

const PeriodicTable: FC = (): ReactElement => {
    const [state, setState] = useState<CategoryState>(makeInitialCategories);

    const Categories: FC = (): ReactElement => {
        // todo: need to refactor
        let groupedCategories = [];
        const categoriesMatrix = [];

        for (const category in state) {
            // console.log("category", category)
            groupedCategories.push(category)
            if (groupedCategories.length === 2) {
                categoriesMatrix.push(groupedCategories);
                groupedCategories = [];
            }
        }

        if (!categoriesMatrix.length) {
            return <></>;
        }

        // todo: need to add a memo
        // console.log("RE-RENDER", categoriesMatrix)

        return (
            <div className="categories">
                {categoriesMatrix.map((pairCategories, index) => (
                    <div className="category-group" key={index}>
                        {pairCategories.map((category) => (
                            !!category.length && (
                                <span key={category}>
                                    <input
                                        id={category}
                                        type="checkbox"
                                        name={category}
                                        checked={state[category]}
                                        onChange={toggle(category)}
                                    />
                                    <label htmlFor={category}>{category}</label>
                                </span>
                            )
                        ))}
                    </div>
                ))}
            </div>
        );
    }

    const toggle =
        (category: keyof CategoryState) =>
            (e: ChangeEvent<HTMLInputElement>) =>
                setState(prev => ({...prev, [category]: e.target.checked}));

    return (
        <div className="table-wrapper">
            <div className="table">
                <div className="cells">
                    <Categories />
                    {elements.map((el: ElementJson) => (
                        <Cell key={el.number} {...el} visible={state[el.category]}/>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default PeriodicTable;